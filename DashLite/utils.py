import streamlit as st
import re
import requests
import hashlib
from sqlalchemy import create_engine
from urllib.parse import quote_plus
#from azure.ai.inference import ChatCompletionsClient
#from azure.ai.inference.models import SystemMessage, UserMessage
#from azure.core.credentials import AzureKeyCredential

IS_DEBUG = False

theme_colors = {
    'Network Issues': '#636EFA',                     # Blue
    'Customer Service Issues': '#EF553B',            # Red-Orange
    'Pricing and Affordability': '#00CC96',          # Teal-Green
    'Product and Service Offerings': '#AB63FA',      # Purple
    'Brand Perception and Reputation': '#FFA15A',    # Orange
    'User Experience and Satisfaction': '#19D3F3',   # Cyan
    'Digital Inclusion and Accessibility': '#FF6692',# Pink
    'Market and Regulatory Factors': '#B6E880',      # Light Green
    'Other Theme' : "#d3d3d3"                        # Light Grey
}

SQL_API_URL = "https://flowise-210n.onrender.com/api/v1/prediction/dbd00d0f-dc26-4d07-9a99-ba4ea670ffed"
PY_CODE_API_URL = "https://flowise-210n.onrender.com/api/v1/prediction/4b48ba12-ee76-49bf-8e6d-892c20946441"
SIBUYI_URL = "https://flowise-210n.onrender.com/api/v1/prediction/8a883cd9-eb8f-4fb0-9bb3-c10d2a23e549"
JIDE_URL="https://flowise-210n.onrender.com/api/v1/prediction/1a47203a-a94d-4c9d-bccb-d6e9e42f0a0e"

TABLE = 'Post'

USER_CREDENTIALS = {
    "tisluser": hashlib.sha256("Telkom@TISL2025".encode()).hexdigest()
}

def clean_sql(sql_text: str) -> str:
    """
    Cleans a SQL string generated by GPT by removing any Markdown-style
    code blocks like ```sql ... ``` or ``` ... ```
    """
    # Remove all code fences like ```sql or ```
    cleaned = re.sub(r"^```(?:sql)?\s*|```$", "", sql_text.strip(), flags=re.IGNORECASE | re.MULTILINE)
    return cleaned.strip()

def clean_generated_code(code: str) -> str:
    """
    Cleans AI-generated code for safe execution in a pre-imported environment.
    - Removes markdown code fencing (```python or ```)
    - Strips leading/trailing whitespace
    - Removes all import statements (e.g., import plotly.express as px)
    """
    # Step 1: Remove ```python and ``` fences
    code = re.sub(r"```python|```", "", code).strip()

    # Step 2: Remove import statements (whole lines starting with 'import' or 'from')
    code_lines = code.splitlines()
    cleaned_lines = [
        line for line in code_lines
        if not line.strip().startswith("import") and not line.strip().startswith("from")
    ]

    # Step 3: Join back the cleaned code
    cleaned_code = "\n".join(cleaned_lines).strip()
    return cleaned_code

def query_flowise(url_string: str, payload: dict, timeout: int = 60):
    """
    Sends a POST request with JSON payload to the Flowise Agent.
    Automatically times out after `timeout` seconds (default 60).
    """
    try:
        response = requests.post(url_string, json=payload)
        response.raise_for_status()  # Raise an exception for HTTP errors
        return response.json()
    except requests.exceptions.Timeout:
        raise RuntimeError("⏱️ Request timed out after {timeout} seconds.")
    except requests.exceptions.RequestException as e:
        raise RuntimeError(f"❌ Request failed: {e}")
    
def login():
    st.title("Login Required")

    username = st.text_input("Username")
    password = st.text_input("Password", type="password")

    if st.button("Login"):
        hashed_input_pw = hashlib.sha256(password.encode()).hexdigest()

        if username in USER_CREDENTIALS and USER_CREDENTIALS[username] == hashed_input_pw:
            st.session_state["authenticated"] = True
            st.rerun()
        else:
            st.error("Invalid username or password")
